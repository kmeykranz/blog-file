[{"content":"最近在 Steam 上发现了一个神仙游戏，《Turing Complete》。\n这是一款模拟电路，搭建计算机的游戏，从开始的 或门、非门、与门...，到 存储器、计算引擎、条件控制器，然后组出一个 计算机，再之后用 汇编语言，写一些简单的小游戏。\n作为还是一个高中生的我，第一次了解了计算机电路的底层原理，电线的开（1）、关（0），被先人们运用到了极致，非常巧妙的组出了各种逻辑门，然后层层递进，到做出各种元件。\n以前刷到过在 MC 里搭建计算机的视频，当时完全还不懂，觉得用了命令块之类的，在玩了这款游戏之后我恍然大悟，原来只要用那几个基础的红石元件，完全可以一点一点地做出一个计算机。\n这下真的是在边玩游戏边学习了，游戏里还普及了德摩根定律：对四个基础逻辑门的输入或输出进行取反，即可互相转换。\n这样通过玩游戏的形式，一点一点的过关斩将，模拟做出计算机，是个不错的办法。在以后实际上手的时候，或者在学习这个知识的时候，会轻松很多。\n","date":"2025-02-19T00:00:00Z","image":"https://p.fiveth.cc/img/2025%2F0219212425.png","permalink":"https://blog.fiveth.cc/p/turing-complete/","title":"图灵完备：一款教你搭建计算机的游戏"},{"content":" 在现在这个时代，媒体上知识这么多，我们为什么还要读书？\n即使知道读书在某些方面有好处，比如对专注力有帮助，但在学习效率上，似乎还是在媒体上看知识视频的效率更高，可以在最短时间学到最多的东西。\n但事实并非如此。\n资讯vs知识\r我们现在在网络上可以看到很多资讯。比如现在，每天都会有新的AI动态，这个模型又超过了那个，那个又超过了这个，实际上用几句话就可以概括一年的AI发展：语言大模型取得巨大突破，众多企业开始研究自己的模型，视频生成AI也出现了…\n了解更多资讯是有好处，但是它们不是知识。你现在看到的资讯，过了一年就什么也不是了。我们更需要的是深层的知识，不管实事如何变化，我们的知识都还是经久不衰的。这就是我们为什么要读书，去学习底层的原理，这样不管资讯如何变化，我们都能很快的理解。\n媒体知识vs书籍知识\r进入正题，讲讲媒体上的“知识”，现今媒体发达，我们可以在媒体上高效率地获得很多信息，像短视频、文章，里面也有很多知识，甚至还可以直接听书籍的讲解，10分钟就能听完一本书，但这之中其实有一个陷阱。\n这些媒体都是直接把现成的知识放在我们眼前，使得我们跳过了思考的步骤，直接取得别人得出来的结论，这正好迎合了我们大脑喜欢偷懒的特点。然而这样获得的知识实际上不是属于我们的，这样获得的知识是不会印象深刻的，你可以在一天之内在媒体上得到十几本书的结论，但你真的记得住他们吗？你真的能运用到生活之中吗？可以说，这些媒体在剥夺我们思考的权利，我们的大脑越来越懒，越来越不善于思考，即使我们在媒体上看到错误的信息，我们也会盲目从之。\n这就是为什么我们要读书，不一定是读书，也可以是其他形式，重点是其深度学习的性质。我们应该能够主动地去思考，了解背后的原理，通过自己的思考得出结论。这样的知识才会成为我们知识体系的一部分，融入我们的思维和世界观之中。很多书的结论可以用很短几行字来概括，但这本书还是值得阅读，因为我们在阅读时，了解原理和推理的过程，以及在上面花的时间，都在不断的加强我们对于这个知识的记忆。换句话说，你读一本书“浪费”的时间越多，它对你可能越有帮助。\n我曾觉得那些写影评、书评的人很厉害，因为当我自己看完一个很有感触的电影后，经常发现自己什么都写不出来，到头来只是复述了其他影评的原文，没有自己的理解和想法。这是大脑长期不经思考地接受信息导致的，本应擅长思考、发表观点的大脑，渐渐变得只能被动接受信息。这是我们需要去训练的，写不出文章不只是语言组织的问题，也可能是我们的大脑缺乏主观的思考，根本就没有一个自己清晰的观点，从来都是看别人总结出来的结论。\n","date":"2025-01-16T00:00:00Z","image":"https://p.fiveth.cc/img/2025/0116093403.png","permalink":"https://blog.fiveth.cc/p/why-reading/","title":"媒体上这么多知识，为什么还要读书？"},{"content":"Medium 是外网一个阅读文章的平台，他的特点是文章质量高，在里面可以学到很多知识，涉及各种领域，非常适合日常浏览，打破信息差。但是很多的高质量的内容需要订阅会员才能阅读。这篇文章就给大家提供一个白嫖的方法。\n我们要用到的破解网站是 ReadMedium，在这个网站内填入 Medium 的付费文章链接，就可以自动获取隐藏的文章内容，进行阅读。网站还提供了一个方法，就是在 medium 的文章页面，把域名改成 readmedium.com 就可以跳转。网站还提供了一个 AI 概览的功能。\n但是这样还是略显麻烦，所以我们可以用油猴上的一个脚本 Medium-Unlock ，它会在 medium 页面上加入一个快捷按钮，点击就会自动跳转到对应的 readmedium 页面。\n接下来，我会教大家怎么安装这个脚本，以及如何在 ios 系统 Safari上使用这个脚本，这样我们在手机上也可以使用。\n在Chrome上安装\r这里演示 chrome 浏览器（edge 同理），首先打开谷歌应用商店，然后搜索 Tampermonkey 安装油猴扩展。\n然后我们打开这个链接 Medium-Unlock ，点击安装脚本，然后在弹出的页面再次点击安装即可。\nIOS系统在Safari上安装\r要在 Safari 上安装拓展，我们要先安装这个软件：Userscript 打开后，我们点击 change directory，在文件中新建一个文件夹用于储存脚本，名称随意。\n接下来，我们到 设置-\u0026gt;App-\u0026gt;扩展 中打开 userscript 的权限。\n然后打开浏览器，在上方扩展按钮，点管理拓展，然后打开 userscript\n现在我们再打开 medium，就可以看到旁边的解锁按钮啦。\n","date":"2025-01-09T00:00:00Z","image":"https://p.fiveth.cc/img/2025/0109193039.png","permalink":"https://blog.fiveth.cc/p/medium-unlock/","title":"Medium解锁：用脚本一键解锁Medium付费文章"},{"content":"之前也折腾过很多笔记软件，从 Typora 到 Notion 到 Obsidian。直到最近发现了 UpNote。\nObsidian 的问题：多端同步不方便，我经常用ipad写笔记，obsidian 在手机端显得有些拥挤，操作不方便。 我的需求：我的电脑是 windows，手机和ipad是 ios，需要全平台同步。我在ipad上使用较多，所以需要app在 ios 上方便好用。偏向文件夹式的笔记管理方式，文件夹要能多层嵌套。 UpNote\r这是一个类似印象笔记和苹果备忘录的笔记软件，干净简洁，通过笔记本（相当于一个文件夹）管理笔记，笔记本可以嵌套笔记本，没有层数限制。它支持全平台同步，在ios上适配非常好，很像苹果备忘录。会员价格是168元终身买断。\n支持markdown，目录，标签，链接，代码，模版，可以在笔记嵌套youtube视频。可以插入图片，多端同步，买了会员就有了一个无限大小的图床。\n偶然看到新海诚也在用这个，他发帖说用UpNote取代了印象笔记\nPARA系统\rPARA是一个广受认可的笔记管理方法，主要有四个模块组成“项目Projects，领域Area，资源Resource，归档Archive”\n建四个文件夹，分别放： Project：自己当前在做的项目，有目标、有期限（举办生日聚会、产品发布） Area：长期维持的领域，没有期限（比如健身、健康、阅读） Resources：感兴趣的资源（学习外语、游戏笔记） Archives：做完的项目、不再继续维持的领域，放到这里，以后可能会用到\n这里面每个项目、领域也都是一个文件夹，比如第一个例子，我们近期要举办一个生日聚会，就可以在Project文件夹内建一个“举办生日聚会”文件夹，里面放相关的笔记：聚会计划、查阅到的好注意\u0026hellip;\n下面这张图来自PARA作者的官网\n这是我的笔记目录，供大家参考：\n如果有哪个文件夹，你不再往里面添加新的笔记了，就可以把整个文件夹移动到Archive归档内。但是要注意一个误区：Archive不是一个垃圾桶，Archive里的文件是自己之后可能会看的。完全没有价值的笔记应该直接删掉。\n这套系统主要是帮助我们有条理的组织笔记，在需要的时候能快速找到一篇笔记。所以我们不一定要循规蹈矩，也可以衍伸出一些自己的理解，做一些改动。怎么样好用怎么来，重要的是自己顺手。\n","date":"2025-01-07T00:00:00Z","image":"https://p.fiveth.cc/img/2025/0109192517.png","permalink":"https://blog.fiveth.cc/p/note-tools/","title":"我的知识管理工具：笔记软件UpNote和PARA系统"},{"content":"初看到书名时，我本以为这是一本普通的鸡汤。实则不然，在短短阅读十几页后，我就感受到了这本书强大的力量。某种角度来讲，这本书能解决一切你在生活中的问题，无论是疾病、焦虑还是痛苦。这是一本心灵之书，文章开篇就提到，不要用理性去思考文中的内容，内容也包含了很多宗教思想。到目前为止，我认为这可能是我看过收益最大的一本书，因为他撼动了我对生命的思考。今天就跟大家分享下一些内容。\n你不等于你的大脑\r书中提到，我们不等于我们的大脑。因为我们使用大脑思考，我们看到的，听到的，都经过大脑，我们的想法也源自大脑，也就是思维，我们在潜意识中都误认为思维就是自己。但如果我们再往深去想，窗外的树木，它们没有大脑，他们是什么呢？同样，我们人类也是一个道理，我们的思维并不能代表我们，大脑只是我们的一个器官，一个工具。我们还有一个更深的本质，书中把它叫做“本体”。\n小我思维\r我们把思维误认为就是自己，就叫做小我思维。大脑是一个很好的工具，我们用它思考，也是它才让我们成为了高级动物。但是很多问题也产生于思维，各种情绪、痛苦、甚至疾病，都产生于思维。当我们处于小我思维的时候，我们就会被思维控制，被情绪和痛苦环绕。\n一切\r当下时刻，就是你所拥有的一切。过去和未来都是思维幻想出来的，在当下时刻，唯一真实的就只有当下。思维是建立在过去和未来上的，当你在沉浸于过去和未来时，思维是最活跃的，这个时候它能最大化的控制你。当你完全专注当下时，思维就不会存在。因此，越是接受当下痛苦就越少。\n痛苦之身\r你有没有想过，在你遇到不好的事情的时候，明明事情已经发生了，并且痛苦对你没有好处，为什么你还会在脑海中不断地去想自己的悲惨经历，让自己越来越痛苦？\n书中提到一个概念，就是你被痛苦之身控制了。实际上，你在从痛苦中获得的快感，你的思维创造出了一个悲惨人物的形象，你认为他就是你（自我认同），你的大脑恐惧失去自我认同，所以会抗拒你的摆脱。\n幸福\r我们一生都在追求幸福，我们总会有不满足的地方，然后憧憬着未来的生活，以此获得心理上的满足和快感。这其实是一个循环，当你真正到了想象中的未来生活的时候，你还会有不满足的地方，还会期盼未来，你永远在思维的陷阱之中，无法获得解脱以及内心的宁静。我们很多人都在时间里寻求拯救，但拯救并不在时间和空间上，真正的拯救就在此时此刻。\n我们思维认为的喜悦并非喜悦，那只是痛苦和欢乐的循环，我们一旦失去了那件事就会痛苦。每一次欢乐的内部都隐含着痛苦的种子，这个对立面迟早会显化。真正的喜悦来自于内心的宁静，他是永恒的。\n实践\r这本书的思想需要我花很长的去实践和理解。\n日常生活中不断实践：\n聆听思维的声音（不要去批判思维，在批判思维的时候另一个声音（思维）就会出来）\n当下时刻就是你所拥有的一切，把生活重心完全放到这一刻。\n思维会批判当下，产生痛苦。不管当下情况如何，我们都应该接受当下，和当下共事，采取行动。把当下当成盟友而不是敌人。\n保持临在状态（观察者视角），对痛苦保持关注，感受它的力量，不让他控制思维。痛苦之身会不断创造新的痛苦，或者伤害他人。他会假装让你认为你就是他，让你认同他。察觉自己从痛苦中获得的快感，以及想谈论他或是琢磨他的冲动，这会让他消失。\n练习冥想，感受当下。\n","date":"2024-12-22T00:00:00Z","image":"https://p.fiveth.cc/img/2025/0109192819.png","permalink":"https://blog.fiveth.cc/p/%E5%BD%93%E4%B8%8B%E7%9A%84%E5%8A%9B%E9%87%8F%E6%8B%AF%E6%95%91%E5%B0%B1%E5%9C%A8%E6%AD%A4%E6%97%B6%E6%AD%A4%E5%88%BB/","title":"《当下的力量》：拯救就在此时此刻"},{"content":"hi大家好，作为一个学生的我，一直对体态问题有关注。\n每天都长时间坐着学习、看电脑，颈椎难免出现问题，如头前倾、颈椎生理曲度变直、富贵包，所以有一套固定的颈椎保健训练很重要。\n⭐脊医博士鹏哥作为中国奥委会备战特聘的运动脊医专家，给出的训练方案非常科学全面，让看过很多相关视频的我眼前一新。没想到加入平衡训练和眼睛训练，对我们的脊椎和脊柱有很大帮助。其次颈椎的问题还和我们大脑的压力息息相关。\n视频推荐：\n【脊医博士鹏哥】颈椎训练 【脊医博士鹏哥】眼睛重新校准训练（颈椎训练中的眼睛训练的补充，可以刺激脑干）\n这是从视频中提取的笔记，建议结合视频实用。\n1. 平衡训练\r目的：训练前挺脊髓束 单脚站立30s（进阶：闭眼）\n2. 练眼睛\r目的：刺激脑干 眼睛跟着笔走，上下左右 然后闭眼，鼻子吸气4s，嘴巴吐气8s\n3. 颈椎深层肌肉\r颈椎对抗：10s，5次\n4. 生物压力反馈仪\r购买一个生物压力反馈仪，能锻炼大脑对颈椎的控制能力\n🌞日常\r蜂鸟：手呈w形状转动，像蜂鸟一样飞 压背部：跪着，把手肘压在凳子上 头靠墙支撑 🦴支撑\r最佳枕头所需的三个支撑点：\n后脑勺：无感支撑，放松大脑\n颈椎曲度：软支撑\n颈胸椎结合处（富贵包）：强支撑 这个很重要\n将颈胸椎结合处撑在枕头最硬的突起处，做牵引。\n","date":"2024-05-22T00:00:00Z","image":"https://p.fiveth.cc/img/2024/0522220801.webp","permalink":"https://blog.fiveth.cc/p/train-neck/","title":"颈椎训练：每个人都应该将其加入日常"},{"content":"hi，大家应该发现了，我的博客变样了\n因为我把博客从Hexo迁移到了Hugo\n2022年疫情上网课的时候，我用Hexo搭建了我的个人博客\n2024将博客迁移至了Hugo\n😯原因\r优点\r相比Hexo，Hugo的静态生成速度更快。在本地运行后半秒不到就能在本地生成完页面，方便调试。 看了L1nSn0w大佬的博客后，被Stack主题这个简约舒适的博客页面狠狠种草了。个人觉得这样的页面阅读体验非常好，没有其他花里胡哨的东西吸引眼球，进来就是一排文章，方便阅读。 最主要是为了减少折腾，这让我可以专心地写文章。不再反复折腾博客页面。 缺点\rHugo在国内的社区没有Hexo的大，意味着遇到问题比较难找到解决方法，需要一定Debug能力。 没有Hexo那么多插件功能 So\r对我来说，Hugo会更加适合我。\n大家可以根据个人需求和喜好选择，看看自己是要简约的，还是多功能、自定义化高的。\n这里奉上我的Hexo博客搭建教程\n😎关于Hugo安装\r这里列出我在hugo博客搭建过程中阅读的文章：\n【L1nSn0w】(1)带着Stack主题入坑Hugo\n【L1nSn0w】(2)部署你的Hugo博客\n【CSDN】GitHub Action自动化部署Hugo博客\n【L1nSn0w】(3)Stack主题的自定义\n我在自动部署处做了些改动：\n把deploy_key那行换成PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}，然后在仓库设置添加secret变量PERSONAL_TOKEN，里面填token。token在用户设置中创建，要勾选repo和workflow权限。\n","date":"2024-05-17T00:00:00Z","image":"https://p.fiveth.cc/img/2024/0518131750.webp","permalink":"https://blog.fiveth.cc/p/hugo/","title":"关于博客框架迁移"},{"content":" 本篇前文：如何用Hexo搭建个人博客? 本文基于Hexo博客搭建基础教程(二)修改，部分转载 我的Hexo优化系列：Hexo文章目录 我的博客搭建教程是一年前写的了，非常感谢fomalhaut，当时我是跟着他的教程一步步搭建的。最近我终于在b站发了视频版的博客搭建教程，有很多朋友想进一步优化博客。这篇文章接上一篇，教大家将博客部署到vercel、主题安装、Hexo博客的基础用法。\nVercel部署\rGithub提供的网址在国内的访问速度较慢，所以推荐在搭建完后用Vercel部署，再通过Vercel绑定到自己的域名上，这样会速度会很快。\n因为Vercel给我们分配的域名在国内是无法访问的，所以我们需要把在Vercel部署的绑定到自己的域名上，这样就可以访问了。\n域名可以在阿里云等域名供应商购买，我用的是西部数码，便宜好用。\n建议选用com，cn或cc等常用好记的顶域，对SEO比较友好，自定义部分的长度尽可能短，别人才会更容易地记住你的网站，域名就是网站的名片。\n使用Vercel部署\r首先需要一个Vercel账号，这里推荐用GitHub账户关联，这样你就可以在vercel中直接托管你的GitHub库中的项目了，实现开发部署一步到位（网络不流畅可以考虑挂梯子）。 当你用你的Github账户关联并绑定手机号登录之后，点击右上角的Add New Project创建新的项目，之后导入选项那里选择Continue with Github，这时候应该能看到你Github账号的仓库，选择你刚刚部署成功的存储静态博客的仓库\u0026lt;username\u0026gt;.github.io右边的Import选项，表示你要导入该仓库。 起一个只能有字母、数字或者或者连字符的项目名称，然后其他默认，点击Deploy，等待一分钟即可部署成功，部署成功后电极Continue to Dashboard跳转到控制面板，下图所示就是控制面板，看到就代表成功部署到了，但是我们现在还不能访问他给出的域，因为GFW把Vercel屏蔽了。 绑定自定义域名\r现在你有一个github托管的网址username.github.io，以及在Vercel上有一个blog-demo-chi.vercel.app，但是它国内无法访问，所以这时候我们就需要将Vercel部署的网页绑定到自己的域名上。\n接下来我们绑定自己的域名：\n点击Vercel控制面板右上角的View Domains查看当前的域，我们可以看到仅有Vercel给你预分配的一个域名，此时我们输入我们要用的域名，添加后他会提示你添加一条DNS解析记录。 我买的域名是fiveth.cc，我决定用二级域名blog.fiveth.cc当我博客的域名，大家也可以直接用根域名\n接下来在域名解析记录里面添加记录，其中记录类型对应Type，主机记录对应Name，记录值对应Value，其他的设置默认即可。 如果不成功，可以尝试统一用A记录，值76.223.126.88\n如下是我的示例，blog解析出来的域名是blog.fiveth.cc，@解析出来的是根域名fiveth.cc\n回到Vercel刚刚查看域名的地方，如果操作没问题，应该会显示域名配置成功的提示，此时就可以通过自定义域名来访问我们搭建的网站了。 当你有了新的域名之后，需要将[BlogRoot]\\_config.yml文件中的url配置项改为自己的新域名，这样博客的文章链接才会正确生成。 安装主题\rButterfly主题\rButterfly主题是最流行的主题，拥有很大的社区，自定义度高，还可以用来魔改。\n这是官方的安装文档：【Butterfly 安裝文檔】\nButterfly的魔改：推荐文章【博客魔改教程总结(一)】\n安知鱼主题\r安知鱼主题一款基于Butterfly主题修改的主题，也是我目前在使用的。\n如果大家也想用和我一样的话，可以直接跟着【安知鱼主题官方文档】进行安装和配置，文档非常详细。\n其他主题\rhexo还有很多其他主题，可以在hexo主题中找到。\n基础用法\rFront-matter\rFront-matter 是 markdown 文件最上方以---分隔的区域，用于指定个别档案的变数。\nPage Front-matter 用于页面配置 Post Front-matter 用于文章页配置 如果标注可选的参数，可根据自己需要添加，不用全部都写\nPage Front-matter：\n--- title: date: updated: type: comments: description: keywords: top_img: mathjax: katex: aside: aplayer: highlight_shrink: --- 写法 解释 title 【必需】页面标题 date 【必需】页面创建日期 type 【必需】标籤、分类和友情链接三个页面需要配置 updated 【可选】页面更新日期 description 【可选】页面描述 keywords 【可选】页面关键字 comments 【可选】显示页面评论模块(默认 true) top_img 【可选】页面顶部图片 mathjax 【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false) kates 【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false) aside 【可选】显示侧边栏 (默认 true) aplayer 【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置 highlight_shrink 【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置) Post Front-matter：\n--- title: date: updated: tags: categories: keywords: description: top_img: comments: image: toc: toc_number: toc_style_simple: copyright: copyright_author: copyright_author_href: copyright_url: copyright_info: mathjax: katex: aplayer: highlight_shrink: aside: --- 写法 解释 title 【必需】文章标题 date 【必需】文章创建日期 updated 【可选】文章更新日期 tags 【可选】文章标籤 categories 【可选】文章分类 keywords 【可选】文章关键字 description 【可选】文章描述 top_img 【可选】文章顶部图片 cover 【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空) comments 【可选】显示文章评论模块(默认 true) toc 【可选】显示文章TOC(默认为设置中toc的enable配置) toc_number 【可选】显示toc_number(默认为设置中toc的number配置) toc_style_simple 【可选】显示 toc 简洁模式 copyright 【可选】显示文章版权模块(默认为设置中post_copyright的enable配置) copyright_author 【可选】文章版权模块的文章作者 copyright_author_href 【可选】文章版权模块的文章作者链接 copyright_url 【可选】文章版权模块的文章连结链接 copyright_info 【可选】文章版权模块的版权声明文字 mathjax 【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false) katex 【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false) aplayer 【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置 highlight_shrink 【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置) aside 【可选】显示侧边栏 (默认 true) 注意：我的博客根目录路径为 【D:/Blog/】，下文所说的根目录都是此路径，将用[BlogRoot]代替。\n标签页\r前往你的Hexo博客根目录，打开Git Bash执行如下命令：\nhexo new page tags 在[BlogRoot]\\source\\会生成一个含有index.md文件的tags文件夹。\n修改[BlogRoot]\\source\\tags\\index.md，添加type: \u0026quot;tags\u0026quot;。\n--- title: tags date: 2022-10-28 12:00:00 type: \u0026#34;tags\u0026#34; --- 友情链接\r前往你的Hexo博客根目录，打开cmd命令窗口执行如下命令：\nhexo new page link 在[BlogRoot]\\source\\会生成一个含有index.md文件的link文件夹\n修改[BlogRoot]\\source\\link\\index.md，添加type: \u0026quot;link\u0026quot;\n--- title: link date: 2024-4-29 12:00:00 type: \u0026#34;link\u0026#34; --- 前往[BlogRoot]\\source\\_data创建一个link.yml文件（如果沒有 _data 文件夹，请自行创建），并写入如下信息（根据你的需要写）：\n- class_name: 1.技术支持 class_desc: 本网站的搭建由以下开源作者提供技术支持 link_list: - name: Hexo link: https://hexo.io/zh-cn/ avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg descr: 快速、简单且强大的网志框架 siteshot: https://source.fomal.cc/siteshot/hexo.io.jpg - class_name: 2.友情链接 class_desc: 一些好朋友~~ link_list: - name: Fiveth link: https://blog.fiveth.cc/ avatar: https://p.fiveth.cc/avatar.jpg descr: 分享知识与生活 siteshot: https://p.fiveth.cc/siteshot.jpg class_name和class_desc支持 html 格式，如不需要，也可以留空。\n子页面\r子页面也是普通的页面，可以使用hexo new page xxx创建页面。\n404页面\r主題內置了一个简单的404页面，可在设置中开放。\n如需本地预览，请访问 http://localhost:4000/404.html\n## A simple 404 page error_404: enable: true subtitle: \u0026#34;页面沒有找到\u0026#34; background: ","date":"2024-04-29T21:33:53Z","image":"https://p.fiveth.cc/img/m/hexo.jpg","permalink":"https://blog.fiveth.cc/p/138e/","title":"Hexo搭建进阶：Vercel部署、主题安装、基础用法"},{"content":"4.23 今天是世界读书日📖\n正好最近我最近开始记录阅读，规划读书。\n这篇文章就和大家聊聊我的读书方法\n为什么读书\r以前我都是看视频获取知识的，在这个时代，通过短视频在很短时间获得大量信息。\n但现在我开始阅读，通过书籍去学习。为什么呢？\n书籍是作者花几年时间写的，而视频通常只是几天时间做出的。 书中大量的举例、解释，让我们对知识了解更通透。 自己提取出来的知识，印象才会深，记得深。 读书可以进入心流状态，提高专注力。在这个快节奏的时代，离开手机，读读书，可以让我们慢下来。 我只列出了几个点，读书的原因有很多，许多名人都推荐我们读书。\n我的读书笔记\r我每读一本书，都会用一面A5纸做一个读书笔记。\n对，就是一面A5纸，我会把笔记的量控制在这张纸中。为什么呢？\n因为我们的记忆是有限的。很多人在读书后会做大量的梳理、思维导图，但大部分人只是将作者的思路框架重新理了一遍，告诉自己搞懂了。之前我也试过做全书梳理的笔记，结果发现自己没有记住书中的多少知识，并且也不愿意再翻那长长的笔记。\n实际上，一本书，只要有一个点让我们受到感触，并让我们去行动了，那它就发挥了巨大的价值。在读完后只记下最受感触的几个点，并尝试将他们运用起来，做出改变。而不是大量梳理，告诉自己我懂了。\n我之前的文章 一本让我开始觉醒的书：《认知觉醒》中有讲过\n我用什么读书\r每次看完书都要重新在网上买书，等快递。\n所以之前我会用iPad读书，书籍我都是从Zlibrary下载。但是，阅读时长上去之后，眼睛看久了会疲劳，伤视力。于是，我就买了个电纸书：\n我现在用的是kindle kwp3，某鱼330💰入手的，非常小巧可爱，白色的颜值非常高。可以拿着在地铁上看书。\n我一般都是从zlibrary下书，而且还可以保存在amazon的图书馆云端上，要读的时候再下载。\n读书是一生的习惯，让我们一起读书吧📖。\n","date":"2024-04-23T13:48:27Z","image":"https://p.fiveth.cc/img/m/lowsun.webp","permalink":"https://blog.fiveth.cc/p/ef0e/","title":"读书日：聊聊我的读书方法"},{"content":"这是我第二次考雅思，考了7分。全靠听力8.5拉的分，口语甚至只考了个5.5，非常离谱。我对这份成绩是有些失望的，尤其是口语给我整无语了。\n我第一次考的是6.5分，当时口语还有6，这次给了个5.5，我个人认为发挥是差不多的，可能是考官的判断问题。值得一提的是我踩了个雷，在有一个问题的时候，我刚回答了个Of Course，之后考官立马地打断我，问下一个问题。当时我非常疑惑，回头考完一查发现Of Course是非常不礼貌的，意思相当于“这不废话吗”😅。\n非常可惜，口语小分没有到大学申请标准，如果有6的话，这份成绩单至少可以用来保底。但是没关系，我的目标不局限于此，暑假的时候我会做好准备后再考一次，争取总分7.5，小分6.5。\n不过听力稳定发挥了我的平常实力，还是很好的。给大家分享以下我学习英语的一些小方法：\n看英语视频，老生常谈了，但是有要点，就是去看自己感兴趣的内容，比如我平时喜欢在b站看教学视频，那不妨去Youtube上看看，可以找到更多优质的内容。为了学习视频中讲的内容，我就会认真去听，并且思维模式也会跟着作者的英语走。这个时候英语就是我用来学习其他东西的工具/媒介，练习英语只是顺带着。\n我还发现一个非常有用的方法，就是用英语写日记。如果你已经有写日记的习惯，那可以试试改成用英语写，这个方法非常有效，你在表达自己想法和情绪的时候，就必须用英语组织出来，遇到不会讲的也会去查了然后写上去。只需要坚持几天，就会发现自己有时候思考是用英语思考的，非常有意思。\n总结发现，这两个方法都是将英语作为一种工具去使用，顺带着用英语去做别的事，而不用特意的去学习，我认为这是很好的方法。非常适合真正、长期地地提升英语硬实力，但是如果是应对考试之类的，还是专项训练会效率比较高。\n","date":"2024-04-20T20:24:00Z","image":"https://p.fiveth.cc/img/2024/0420213033.jpg","permalink":"https://blog.fiveth.cc/p/938f/","title":"雅思7分的教训：听力8.5，口语踩雷"},{"content":"最近我读了《认知觉醒》这本书，作者是周岭。我非常感谢这本书，对我帮助非常大。如果你想改变自己现在的生活，变得更加优秀，这本书一定会帮到你。书中给出了许多提升自己的方法，其中的每个章节都让我有所感悟。这篇文章我会讲其中一些让我最受感触的点。\n元认知\r书中提到了“元认知”这个概念，当我们开启元认知，就会不断的进步、提升。开启元认知，就是开启第三人称，时刻审视自己在做什么、在想什么。有了这种觉知，你就会在玩游戏的时候意识到自己正在过度放纵，并且思考自己的大脑为什么会沉迷于游戏当中；当你分手后无比沮丧的时候，就会思考自己现在处于一个怎样的状态，为什么不开心。当你开启这样一个能力之后，你就会无限进步，你能一直审视自己的行为和思维，在错误的时候意识到并改进。这就相当于自己开了上帝视角，时刻地在监督自己。\n当你知道了这个概念之后，你就可以开始行动、练习，时刻审视自己。当你受到任何感触，比如开心或沮丧时，问问自己是什么原因，这会让你变得更加了解自己。最近我看到一个句子让我很有感触，\u0026quot;who looks outisde, dreams; who looks inside, awakes.\u0026quot;-Carl Jung，当你开始挖掘自己内心时，你就会清醒，明白自己到底想要什么，了解自己的思维方式，这会帮你打开自我提升的大门。写日记、写每日反思是一个很好的方法，在每天的结尾反思自己做了什么，无需置疑，这绝对是一个改变终身的习惯，孔子说过”吾日三省吾身“。其次，练习元认知最好的方法是冥想，具体关于冥想的知识，大家可以自行去搜索，之后我会单独写一篇文章来讲我的冥想心得，总之这是一个非常有益的习惯，在冥想中，我们会练习将注意力放在呼吸和身体上，当有杂念的时候，我们就需要意识到并注意力拉回。可见冥想是练习元认知能力最直接的方法。\n行动\r”真正的成长不在于自己懂了多少道理，而在于自己做了多少改变“\n很多时候，我们会从书中或者视频中学到很多知识，在读后我们都会恍然大悟，觉得很有道理，但是，你可以回忆一下其中有多少是你真正为之做出改变的，运用到了生活之中的。我们很容易就会陷入到只停留在懂了，但没有去做的阶段。所以，当你学到任何知识让你受到感触的，那就开始行动，思考如何做出改变。这个道理很使用于读书，很多人读书会做大量的笔记，甚至思维导图，但他们只是将作者的思路整理列了个大纲，而在做完之后他们认为懂了就再也没翻阅过，即使翻阅，大量的内容也会让他们头晕目眩，这点我也深有感悟。真正好的读书方法是：\n在书中取一个你最受感触的点并为之做出改变，这远远比你把一大堆知识记下来要有用得多。想想，一本书只要让你改变了一点点，那它就已经发挥了它的巨大价值。\n所以，在读完这本书后我改进了自己的读书方法，在读完后只记下最受感触的几个点，并尝试将他们运用起来，做出改变。而不是大量梳理（可能适用于课程学习，但肯定不适用于读书），告诉自己我懂了。其次，我为什么会写这篇文章，分享读书知识，那就是费曼学习法。\n费曼\r费曼学习法就是将自己学到的知识，用自己的话讲述给他人，在这个过程中知识会在你的大脑中得到加工和巩固，如果你能非常清晰地讲述给他人，那说明你真正懂了。这本书我是上周读的，而我现在并没有拿着这本书写博客，我只是将自己从这本书中得到的最受感触的，进入我记忆中的，用自己的话写了出来。\n关联\r能与自己产生关联的知识，是记得最深的。从一本书中你可能会学到很多有道理的知识，但你不一定会记住每一个。这个知识需要和你以往某个经历，或者存在于你知识体系中的某个点练习起来，才会被记得非常深。如果和你大脑中的知识没有任何关联，即使很有道理，也很容易忘记。所以，利用好这点，当你看到某个很受感触的知识时，有什么你已知的知识与其相关联，将你的想法记下来。如果你现在是一个学生，你读到职场的一些知识，那么就把它先放一放吧。\n以上就是这本书我深受感触的一些知识点，当然这些只是对我来说最受感触的，和我有关联的，其中还有非常多有用的知识，非常推荐大家自行去阅读这本书。如果大家喜欢这篇文章，可以关注本站，我会每周分享自己读到的好书。\n","date":"2024-04-14T21:57:47Z","image":"https://p.fiveth.cc/img/2024/0518114933.jpg","permalink":"https://blog.fiveth.cc/p/9c7a/","title":"《认知觉醒》：一本让我觉醒的书"},{"content":"今天整理博客，发现我给文章取的文件名比较混乱，要找文章的时候会很不方便。\n一般我们都是用hexo new file_name创建文章的md文件的，然后文章的标题是在md文件的信息栏定义的。而我们很多时候是开始写文章才想好标题，随着写作标题也会发生变动，这导致最后我们文章标题和文件名是不同的，加大了我们的管理难度。\n所以我们会在改动文章标题的时候，将文件名也改成一样的。但是这样手动改非常麻烦。因此我配合ChatGPT用Python写了个一键批量修改文件名的小脚本。这样我们就可以很方便的一键将文件名全部都同步成文章的标题。\n使用方法\r方法1. exe文件\r脚本已经打包成exe文件，大家可以直接下载使用，下载后放到_posts文件夹下运行即可。\nhttps://wwf.lanzoum.com/icY4q1ufi7na 密码:ff6u\n注意：如果标题中有不支持的特殊符号，会导致运行失败。可以往下看，自行用python调整源代码后运行\n记得运行完后将脚本移出文件夹，防止被上传。\n方法2. python运行\r如果有调试需求，大家也可以自己用python编译使用。\n下面是方法：\n首先要安装python。\n在_posts文件夹中创建一个rename.txt文件，复制粘贴下列代码进去：\nimport os dir_path = \u0026#34;./\u0026#34; i = 0 for file in os.listdir(dir_path): ## Skip \u0026#39;.\u0026#39; and \u0026#39;..\u0026#39; if file == \u0026#34;.\u0026#34; or file == \u0026#34;..\u0026#34;: continue ## Construct the full path to the file file_path = os.path.join(dir_path, file) ## Read the file try: with open(file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: lines = f.readlines() except UnicodeDecodeError: print(f\u0026#34;Skipping file due to encoding issue: {file}\u0026#34;) continue ## Skip files with less than 2 lines if len(lines) \u0026lt; 2: continue ## Extract and process the title from the second line title = lines[1].strip().replace(\u0026#39;title:\u0026#39;, \u0026#39;\u0026#39;).strip() ## Remove any marks from the title title = title.replace(\u0026#39;?\u0026#39;, \u0026#39;\u0026#39;) title = title.replace(\u0026#39;|\u0026#39;, \u0026#39;-\u0026#39;) ## Rename new_filename = title + \u0026#39;.md\u0026#39; new_file_path = os.path.join(dir_path, new_filename) os.rename(file_path, new_file_path) i += 1 print(i) 然后将文件名后缀修改成.py\n在文件夹空白处右键，点击在终端中打开\n在终端中输入python rename.py即可运行脚本\n自己做脚本优化了一下博客工作流，成就感满满。\n另外，去年我一直是随缘更博客，接下来我会开始有规律性的定期发文章，分享我的生活和学习到的知识。做博客的精髓在于长期坚持，一直有新内容才会有人关注。一起加油吧😊\n","date":"2024-04-09T11:51:10Z","image":"https://p.fiveth.cc/img/m/hexo.jpg","permalink":"https://blog.fiveth.cc/p/fbe8/","title":"Hexo博客优化：批量修改md文件名"},{"content":"使用Thinkbook14+也有两年了，我是在22年买的。后悔自己买的太早，因为22年酷睿款的续航十分鸡肋（23及24款在续航有很大提升），相信一样用这款的朋友们应该深有体会。离电不到2小时的续航，堪比游戏本。作为一个学生，在学校中基本上只能离电使用，所以我对续航有一定需求。\n在我的一番调教下，它的续航最终达到了静置10小时，低负办公8小时的理论成绩。这对我日常使用体验的提升非常大，终于不用再频繁地把电脑放到充电仓。今天就来分享一下我自用的续航调教方案。本篇部分适用于所有笔记本，部分是针对22 Thinkbook14+酷睿版的。\n文章部分参考自【知乎】2022款ThinkBook 14+/16+酷睿版的电池续航优化更新\n基础\r在离电使用时，做如下设置延长电池续航：\nFn+Q 切换到节能模式（显示电池图标的那个） Fn+空格键 关闭键盘背光 Fn+R把屏幕刷新率调整为60Hz（配置了高刷屏的机型） 右键点击屏幕右下角的电池图标打开电源和睡眠设置，将电源模式设置为最佳能效 打开节电模式 不使用蓝牙时就关掉（WIFI同理） 适当降低屏幕亮度 更新驱动\r近期，官方在驱动程序上对22酷睿款更新了优化续航的措施，我们需要上官网下载更新。操作如下：\n进入官网Lenovo服务与支持\n在搜索框中输入自己的机型（机型可以在笔记本机身底部找到）\n比如我的是ThinkBook 14 G4+ IAP\n点击驱动下载\n下载以下程序的最新版本并安装\nBIOS升级程序 （IAP - HYCN45WW或ARA - J6CN46WW之后版本） Intel显卡驱动 （23/9/27之后版本） 主板Lenovo Dispatcher-Basic 驱动程序（23/9/27之后版本） 关闭独显\r我的机型搭载了独显Nvidia，独显的耗电量是非常大的，我试过用软件让独显强制睡眠，但是监测显示独显仍有耗电。\n所以最后干脆直接在BIOS中关闭独显，以最大程度提升续航，操作如下：\n重启电脑，在开机页面按Enter 按F1进入BIOS控制面板 显示模式选择集显模式 退出并保存 现在我们在桌面右键打开更多选项，就会发现Nvidia控制面板没了，我们成功关闭了独显。\n之后若要开启使用，还是一样的操作进入BIOS调回混合模式即可。\nThrottleStop\rThrottlestop是一个CPU调节工具，可以用来超频/降频/降温/降压。中文版下载\n上面四个选项是选择不同场景，可以分别配置不同场景下的参数，场景的名字可以在设置中自定义。下面是配置选项，这里我们只需要用到Speed Shift EPP（变速EPP）。EPP 允许设置范围为0~255，数值越大越省电，数值越小性能越好。\n这里给大家参考下我的四个场景配置：\n性能：高性能，EPP 32 插电：平衡，EPP 128 离电：省电模式，EPP 192 节能：省电模式，EPP 255 设置开启自动启动\n在桌面右键此电脑，点击管理 左侧展开任务计划程序，点击任务计划程序库 右侧创建任务 取名”Throttlestop“ 触发器页面，新建选择当任何用户登陆时 操作页面，新建然后点击浏览，找到并选择Throttlestop.exe 条件页面，取消勾选只有在计算机使用交流电源时才启动此任务 如果需要进一步提升续航，还可以在FIVR中限制CPU的电压，硬核延长续航，此操作有一定风险，并且新版BIOS限制了电压控制的功能，还需要先解锁电压控制，此处不做展开。\n我的个人调教方案到这里就结束了，我们已经非常大程度提升了续航，可以带着笔记本出门放心耍啦😎\n","date":"2024-02-27T16:03:50Z","image":"https://p.fiveth.cc/img/m/thinkbook-battery-cover.jpg","permalink":"https://blog.fiveth.cc/p/4b21/","title":"2022款Thinkbook14+酷睿版续航优化方案"},{"content":"基础\r小习惯的大力量\r一个微小的习惯改变，会对未来影响很大。 每天进步1%，一年就是很多。 专注于系统，而不是目标。\n基于身份的习惯比基于目标的习惯更有效\r自己想成为什么样的人 用习惯去证明自己是这样的人 习惯形成的4个步骤：\r提示，渴望，反应，奖励。\n例子：你起床(提示)，想要清醒(渴望)，所以喝了杯咖啡(反应)，满足了清醒的需求(奖励)。\n建立好习惯：让提示更明显，让渴望更吸引，让反应更简单，让奖励更令人满意。 打破坏习惯：让提示不明显，让渴望不吸引，让反应更困难，让奖励更令人不满。\n1st law—让提示更明显\r加强对习惯的意识\r写习惯清单：把自己现有的习惯全写上去，并做好坏评估。\nPointing-and-calling：把自己接下来要做的事和结果大声说出来。这样可以增强意识。\n例子：\n“明天五点我要去邮政局” “我现在要吃饼干，但是我并不需要，这会让我变胖。” 让提示更明显的两个方法\rImplementation intension(执行意向)公式：“I will [BEHAVIOR] at [TIME] in [LOCATION].”\nHabit stacking(习惯堆叠)公式：“After [CURRENT HABIT], I will [NEW HABIT].”\n环境比动力更重要\r让好习惯的提示更明显：\n把要阅读的书放在桌子上显眼的地方\n把游戏手柄放隐蔽的地方\n给特定环境关联特定习惯：\n在床上就睡觉，在桌上就学习 （尽量给一个环境只关联一个习惯）\n借助环境远离坏习惯\r依靠自控力只是一个短期的方法，我们需要环境配合才能更长久，要远离坏习惯的提示。\n例子：\n写作业效率不高，就把手机放在另一个房间一段时间。 花钱买太多东西，就不要刷淘宝。 老玩游戏，就把手柄放在看不到的地方。 2nd law 让它更吸引\r诱惑捆绑\r把需要做的和想做的事关联起来\nhabit stacking + temptation bundling公式: After [CURRENT HABIT], I will [HABIT I NEED]. After [HABIT I NEED], I will [HABIT I WANT].\n加入好的圈子\r加入你想建立的习惯在他们之中是常态的圈子，我们会被所处圈子影响\n找到你和圈子中的人的相同特征，这会让你有归属感\n激励仪式\r创造一个激励仪式在困难习惯之前做，给好习惯关联上积极的情感。\n例子：每次玩游戏前深呼吸然后笑，之后在写作业前也这样做。\n3rd law 让它更简单\r开始行动，不断重复习惯，不要纸上谈兵\r调整环境，让习惯更简单。每次做完习惯之后，都为下一次习惯做好准备。\n例子：\n想健身，提前把装备准备好。 想写作业，提前把作业放在桌上。 玩游戏，就把手柄锁柜子里。 善用决定性时刻，用小行为决定走向。\r当你穿上了跑鞋，就说明你决定了你接下来会去跑步。\n这会减少拖延和犹豫。\n两分钟规则\r简化习惯，所有习惯都能简化成在两分钟内完成的形式。 建立起习惯后，再去提升时长和质量。 例子：\n每天读一页书。 穿上跑步鞋。 自动化你的习惯\r投资锁定未来行为的技术和一次性购买。\n例子：买健身房卡，这会迫使你未来常去锻炼。\n4th law 让它更令人开心\r即使奖励\r给好习惯增加立即能获得的奖励，给坏习惯增加立即会得到的惩罚。\nThe Cardinal Rule of Behavior Change:\nWhat is immediately rewarded is repeated. What is immediately punished is avoided.\n例子：记账“去旅游”，每少吃一次大餐就往里存50元。\n视觉化进度\r视觉化习惯的完成进度，增加每次做完后的成就感\n例子：健身记录，读书页码，读书打卡\nHabit Tracking(习惯记录)\nThe habit stacking + habit tracking公式:\nAfter [CURRENT HABIT], I will [TRACK MY HABIT].”\n注意：不要因过度重视记录的次数，而忽略了习惯的质量和本身的目的。\n习惯中断要立即重拾\r不要连续缺勤两次，习惯中断要立即重拾\n习惯违反合同\r找一个搭档，监督你的行为。\n建立习惯合同，让违反承诺的代价变得公开和痛苦。\n高级策略\r选择适合自己的习惯\r每个人都有自己的人格，有自己适合做的事情，要取长补短。\n选择适合自己的习惯，会更好坚持。\n忍受无聊\r成功在于能忍受无聊。\n任何人在感到有动力时都可以努力工作。只有在没有动力的时候，还能坚持下去，才会超越他人。\n习惯的弊端\r养成习惯之后，很容易停止去思考和提升。\n我们要定期做反思和回顾，时刻注意自己的表现。\n","date":"2023-11-23T16:07:26Z","image":"https://p.fiveth.cc/img/m/habits.jpg","permalink":"https://blog.fiveth.cc/p/a76a/","title":"《原子习惯》读书笔记"},{"content":"对一个网站来说，性能是非常重要的，它决定了用户在网页停留的时长。\n如果网页的加载速度很慢的话，用户很容易就会离去。\n有朋友说我的博客速度挺快的，这篇文章就讲讲我是如何优化我的网站性能的。\n性能检测\r首先我们可以使用网站性能检测工具，来获取网站的性能报告，这样我们就可以知道是哪部分拖慢了网站速度，从而对其进行优化。\n我用的工具是Chrome开发者工具中自带的Lighthouse，给出性能报告的同时，它还会给出一些优化的建议。\nVercel网站托管\r我使用的是Vercel来托管我的网站，它在全球以及国内都有非常优秀的速度。如果想要让其在国内可以浏览的话，需要准备一个域名。\n具体如何使用可以参考Fomalhaut的文章Hexo博客搭建基础教程(二)中有详细教程。\n注意：cname的解析方法目前会导致无法在国内访问，需要做一些修改 **失效方法：**记录值类型cname，值为cname.vercel-dns.com **解决方法：**记录值类型A类型，值为76.223.126.88\nVercel加速节点（新）\r{% note info flat %}此章为2024.4新添加内容{% endnote %}\n这是一个vercel加速节点，使用是会自动解析至附近可用节点，尽可能的选择优质节点。\n食用方法：将原来解析至 cname.vercel.com 改为 vercel.cdn.yt-blog.top（CNAME记录）\n由Fgaoxing提供，原文链接：【推一下Vercel加速节点】\n图片压缩\r在我们的博客中，最消耗流量的应该就是图片了。所以为了提升加载速度，对图片的压缩非常重要。\n1.每次将图片上传到图床之前，我都会对其进行压缩（控制在50kb以下）\n2.同时，将图片转换成webp格式也会大大提高加载速度。\n这里推荐一个我一直在用的多功能在线图片压缩工具，非常方便快捷。\nlazyload\r**lazyload(懒加载)**是一个对提升性能非常有效的功能，它会优先加载处于屏幕显示区域内的资源，而不是等待一整个页面的资源加载完毕。这让许多资源可以在用户边浏览的时候边加载，节省时间。\n我给我的评论模块开启了lazyload，因为很多时候评论模块加载都会慢，导致用户要在加载页面等待。\ngulp压缩\rgulp插件可以帮助我们自动压缩博客静态资源。\n具体如何安装使用可以参考Akilar的文章【使用gulp压缩博客静态资源】\nCDN\r让所有的静态资源通过**CDN(内容分发网络)**加载，可以提高资源加载速度。\n我使用的是HEO大佬分享的【Butterfly CDN链接更改指南】中给出的cdn\n这里给出我在butterfly中的cdn列表：\npjax: https://lib.baomitu.com/pjax/0.2.8/pjax.min.js twikoo: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/twikoo/1.4.18/twikoo.all.min.js sharejs: https://lib.baomitu.com/social-share.js/1.0.16/js/social-share.min.js sharejs_css: https://lib.baomitu.com/social-share.js/1.0.16/css/share.min.css lazyload: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/vanilla-lazyload/17.3.1/lazyload.iife.min.js instantpage: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/instant.page/5.1.0/instantpage.min.js typed: https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/typed.js/2.0.12/typed.min.js snackbar_css: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.css snackbar: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.js fontawesome: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/font-awesome/6.0.0/css/all.min.css justifiedGallery_js: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/justifiedGallery/3.8.1/js/jquery.justifiedGallery.min.js justifiedGallery_css: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/justifiedGallery/3.8.1/css/justifiedGallery.min.css aplayer_css: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/aplayer/1.10.1/APlayer.min.css aplayer_js: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/aplayer/1.10.1/APlayer.min.js meting_js: https://npm.elemecdn.com/hexo-anzhiyu-music@1.0.1/assets/js/Meting2.min.js 总结\r这些大概就是我对我的网站做的优化总结了，其实还有很多地方可以再提升，但是对我来说已经够用了。\n希望大家都可以积极地去优化网站的性能，这样才可以收获更多的游客🙂\n","date":"2023-10-11T12:06:31Z","image":"https://p.fiveth.cc/img/m/perf.jpg","permalink":"https://blog.fiveth.cc/p/95d6/","title":"Hexo博客优化：如何优化Hexo的网站性能？"},{"content":"经常白嫖游戏的小伙伴应该都对3DM不陌生，里面有很多盗版游戏资源。但是呢，很多3dm下来的游戏都要用3dm启动器去打开，你说用你启动器打开就算了，就多点两下的事对吧。但是每次打开你启动器，你都要下载个“笑傲江湖”到我电脑里，删了还没用，下次启动的时候又会跳出来，这跟流氓软件有什么区别。今天就教大家怎么摆脱3DM流氓启动器，直接打开游戏。\n首先我们打开3dm启动器目录，如图，打开3dmConfig.ini文件，找到游戏exe文件的路径。\n接下来我们顺着路径去寻找，会发现根本就找不到游戏的exe文件。别慌，这是3dm耍的小把戏，把游戏启动的exe文件给隐藏了。我们要做的就是把被隐藏的文件给显示出来。\n我们打开cmd窗口，进入对应的目录，然后执行dos命令：\n如何打开cmd窗口？win+r，然后输入cmd，点确定\nattrib -s -a -h -r wwzRetailEgs.exe 然后我们就能看到游戏的exe文件在目录中显示出来了，我们可以右键然后将快捷方式创建到桌面，之后我们就不需要用3dm启动器来打开游戏了😎。\n","date":"2023-06-06T22:15:15Z","image":"https://p.fiveth.cc/img/m/3dm.jpg","permalink":"https://blog.fiveth.cc/p/134b/","title":"摆脱3DM启动器打开游戏：避免捆绑下载笑傲江湖"},{"content":"简介\r《深入浅出程序设计竞赛》是洛谷站长出的书，帮助青少年上手C++算法竞赛。书中对学习算法竞赛的顺序编排非常好，很系统，很适合用于算法竞赛入门。文章最后有书籍pdf版。\n下面是我从基础语言入门部分(第一部分)总结出来的精华笔记。\n文件操作\r在文件里创建 title.in文件\nfreeopen(\u0026#34;title.in\u0026#34;,\u0026#34;w\u0026#34;,stdin); freeopen(\u0026#34;title.out\u0026#34;,\u0026#34;r\u0026#34;,stdout); 头文件\rcstdio头文件\r//输入 scanf(\u0026#34;%d\u0026#34;,\u0026amp;a) //输出 printf(%d,a); cmath头文件:\r包含一系列数学函数\n根号sqrt, 几次方pow algorithm头文件：\r一系列算法函数\nmin, max, sort, swap cstring头文件：\r用于char字符串\nstrlen获取字符串长度，strcpy复制字符串内容 fgets读入字符串，sscanf获取字符串，sprintf输 杂货\rASCII码:\r\u0026lsquo;A\u0026rsquo;=66, \u0026lsquo;a\u0026rsquo;=97\n强制转换:\r(int)a 函数:\rstat(int a) //在这个函数里面对放入的a进行修改，函数外是不会生效的。 stat(int \u0026amp;a) //相当于给放入的变量取了个别名，对其修改，该变量也会改变。 stat(int a[]) //相当于传入\u0026amp;a[] scanf(\u0026#34;%d\u0026#34;,\u0026amp;n) //这也是一样，相当于把n的地址告诉函数，这样才能输入到n中。 左移/右移运算符\r//左移运算符 i\u0026lt;\u0026lt;n = i*2^n^ //右移运算符 i\u0026gt;\u0026gt;n=i/2^n^ 随机数\r#include \u0026lt;cstdlib\u0026gt; #include \u0026lt;ctime\u0026gt; srand(time(0)) ans=rand()%a\t//生成0到(a-1)随机数 //ans=rand()%(b-a+1)+a\t生成a到b随机数 异或运算符: ^\r一个成立一个不成立\ntrue^false=true true^true=false 字符串\rchar字符串\r结束标记字符：\u0026rsquo;\\0\u0026rsquo;\n读入字符串方法：\nscanf(\u0026#34;%s\u0026#34;,s); cin\u0026gt;\u0026gt;s; 这两种方法只能读到空格或者换行就会终止\n如果要输入包括空格或换行的字符串，并存入一个字符串中，就用下面这种方法\nwhile (1) { s = getchar();//读入字符 if (s == EOF) break; //... putchar(s); } 结束输入的时候，要使用组合键Ctrl+Z，然后回车。\n这是因为getchar返回EOF(End of file)代表文件读入完毕。\nwindows下输入Ctrl+z / Linux下输入Ctrl+D 来输入EOF标记\nstring字符串\r加强版字符串，可以赋值、拼接\n字符串string需要使用头文件 string,包括下面的常用方法\n//定义字符串变量s string s; //拼接字符串1 s+=str; //拼接字符串2 s.append(str); //比较字符串 s 的字典序是否在字符 str 的字典序之前 s\u0026lt;str; //获取长度1 s.size(); //获取长度2 s.length( ); //截取字符串s,从第 pos 个位置开始len 个字符 s.substr(pos,len); //在字符串s的第 pos 个字符之前插字符串 st s.insert(pos,str); //在字符串 s 中从第 pos 个字符开始寻找 str,并返回位置,如果找不到返回-1。pos 可以省略,默认值是 0。 s.find(str,[pos]); //可以获取带空格字符串 getline(cin,s); 深入浅出程序设计竞赛.zip 蓝奏云\n","date":"2023-03-31T00:00:00Z","image":"https://p.fiveth.cc/img/m/shenji.jpg","permalink":"https://blog.fiveth.cc/p/98d7/","title":"《深入浅出程序设计竞赛》读书笔记"},{"content":"各种排序\r排序 概述 时间复杂度 计数排序 对应票投入对应票箱 O(n) 选择排序 最小的放前 (两重循环) O(n^2^) 冒泡排序 依次比较相邻 (两重循环) O(n^2^) 插入排序 依次拿出一张牌插入排列中 (两重循环) O(n^2^) \u0026hellip; 这些排序各适用不同情况，但时间复杂度总体较大。\n快速排序\r程序设计竞赛中最普遍的排序。\n随机选择哨兵，时间复杂度O(n log n)。但极端情况O(n^2^)。\n概述：\n选出一个哨兵，比哨兵小的数全放左边，比他大的全放右边。\n再分别在左边和右边选出哨兵，进行分类。\n以此循环，直到排序完成。\n#include \u0026lt;iostream\u0026gt; using namespace std; void qsort(int num[],int first,int last) { int i = first, j = last, flag = num[(first + last) / 2], temp; do { while (num[i] \u0026lt; flag) i++; while (num[j] \u0026gt; flag) j--; if (i \u0026lt;= j) { temp = num[i]; num[i] = num[j]; num[j] = temp; i++; j--; } } while (i \u0026lt;= j); //带=为了让i和j交错而过，这样才可以用递归 if(first\u0026lt;j) qsort(num, first, j); if(i\u0026lt;last) qsort(num, i, last); } int main() { int n, num[100000]; cin \u0026gt;\u0026gt; n; //必须从i=1开始 for (int i = 1; i \u0026lt;= n; i++) { cin \u0026gt;\u0026gt; num[i]; } qsort(num,1,n); for (int i = 1; i \u0026lt;= n; i++) { cout \u0026lt;\u0026lt; num[i]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } return 0; } 当然也可以直接用algorithm头文件中的sort函数，\n我们学会自己写是为了理解原理，提升思维，\n同时在有特殊需求的时候可以更自定义化。\n","date":"2023-02-28T00:00:00Z","image":"https://p.fiveth.cc/img/m/sort.webp","permalink":"https://blog.fiveth.cc/p/92b9/","title":"排序算法"},{"content":"我们存储很多数的时候，通常使用数组，但是数组不够灵活。\n哦？为什么说不灵活？\n我们如果要在一个数组前面或者中间插入一个数，就会很麻烦。\n假设我们有一个数组a,里面是排序好的数字,我们要将7按大小顺序插入数组\n我们就得把后面的数全都依次往后移一位，再将7放入。\n这样如果后面的数非常多的话就会很耽误时间。\n所以我们需要用到链表。\n链表就是利用结构体和指针，在存储数据的同时，存储一个指向下一个结点的指针。\n这样我们要插入数字的时候，只要修改下指针的指向，就可以快速的进行插入或取出之类的操作。\n链表有很多种：\n**单链表:**每个结点记录后继(图片演示的就是)\n**双链表:**每个结点记录前驱和后继，它比单链多了个往前走的功能\n**循环单链表:**将单链表的最后一个结点的后继指向第一个结点，形成一个环形结构\n**循环双链表:**将双链表连成环形\n\u0026hellip;（还有几种就不一一列述了）\n这里我们设计一个程序实现一下链表，首先输入四个按大小顺序排列的数字，然后再输入要插入的数字，\n程序会输出插入后的排列\n先上代码\n#include \u0026lt;iostream\u0026gt; using namespace std; struct node { int data;//存数据 node* next;//后继指针 }; int main() { int a; node* head, * p, * q = NULL; head = NULL; for (int i = 1; i \u0026lt; 5; i++) { //用指针p指向一个动态申请的node大小的空间 p = (node*)malloc(sizeof(node)); cin \u0026gt;\u0026gt; a; //将数据存入当前结点(p指向的结点) p-\u0026gt;data = a; p-\u0026gt;next = NULL; if (head == NULL)head = p;//如果是第一个结点，就将头指针指向当前结点 else q-\u0026gt;next = p;//否则将上一个结点的后继指针指向当前结点 q = p;//将q指向当前结点 } //插入数据 int b; cin \u0026gt;\u0026gt; b; node* t = head;//从链表头开始遍历 while (t != NULL) { if (t-\u0026gt;next-\u0026gt;data \u0026gt; b) { p = (node*)malloc(sizeof(node)); //将数据存入当前结点(p指向的结点) p-\u0026gt;data = b; p-\u0026gt;next = t-\u0026gt;next;//将当前结点的后继指针指向下一结点 t-\u0026gt;next = p;//将上一结点的后继指针指向当前结点 break; } t = t-\u0026gt;next;//下一结点 } //输出 t = head;//从链表头开始遍历 while (t != NULL) { cout \u0026lt;\u0026lt; t-\u0026gt;data \u0026lt;\u0026lt; endl; t = t-\u0026gt;next;//下一结点 } //释放动态申请的空间(确保安全) t = head; while (t != NULL) { node* current = t;//记录当前结点 t = t-\u0026gt;next;//下一结点 free(current); } return 0; } 代码不长，但是可能需要时间理解。\n讲讲malloc函数，malloc函数的作用是动态分配内存。\n每次输入数据前，我们就用p指向一个动态申请的新空间，然后存入数据。\n程序的最后，我们用free()函数来释放动态申请的空间，这样可以让我们的程序更安全。\n我们学习c语言和c++应该追求最大程度地优化，排除可能出现的问题。\n","date":"2023-01-09T00:00:00Z","image":"https://p.fiveth.cc/img/m/linklist.webp","permalink":"https://blog.fiveth.cc/p/c8a8/","title":"链表"},{"content":"如何高效筛素数？让我们来看看\n题目：生成一个1到n范围内的质数数组\n菜鸟这样做（枚举法）\r从1枚举到n，判断是素数就存入数组\n下面是判断方法\n菜鸟：\r从2枚举到n-1，如果有能整除该数的，该数就是质数。\n进化版菜鸟：\r菜鸟进化了，从2枚举到$\\sqrt n$\n高手版\r埃氏筛\r这样筛掉后每次下一位没被筛掉的数就都是质数\nbool numlist[100000]; //0代表质数，1代表非质数 int prime[100000], count; void work(int n){ for(int i=2; i\u0026lt;=n; i++){ if(numlist[i]==0){ //如果是质数 prime[++count] = i ; //就先存入 for(int j=i; i*j\u0026lt;=n; j++) numlist[i*j] = 1; //然后将其平方后的所有倍数筛掉 } } return; } 但是这钟筛法还不是最优，因为p的倍数会重复，所以有些数会被重复筛掉。\n那么就引出了我们的最终筛法。\n欧拉筛\r这个筛法避免了重复筛，思路就是：每个合数只会被其最大非自身因数筛除\n多说无益，先上代码：\nbool numlist[100000]; //0代表质数，1代表非质数 int prime[100000], count; void work(int n){ for (int i = 2; i \u0026lt;= n; i++) { if (numlist[i]==0) ans[++count] = i;//是质数就先存入数组 for (int j = 1; j \u0026lt;= count \u0026amp;\u0026amp; i*prime[j] \u0026lt;= n; j++) { numlist[prime[j] * i] = 1; //每次让i乘已放入的质数，然后标记非质数 if (i % prime[j] == 0) break;//但是如果i可以被该数整除就停止（关键） } } 现在我们再来分析下。\n从表可以看出，我们会筛掉每个质数p的平方之后的p的倍数，但是如果i是p的倍数，那就说明它们的乘积那个合数的最大非自身因数不是i，所以不筛。\ni 的值 质数表 筛去的数 2 2 4 3 2, 3 6, 9 4 2, 3 8 5 2, 3, 5 10, 15, 25 6 2, 3, 5 12 7 2, 3, 5, 7 14, 21, 28, 35 ⋯ ⋯ ⋯ ","date":"2022-12-23T11:29:22Z","image":"https://p.fiveth.cc/img/m/oula.webp","permalink":"https://blog.fiveth.cc/p/a680/","title":"欧拉筛-高效筛选质数"},{"content":"这是我之前学习html做的一点笔记，是一些基础，非常简单好学。\n·网页基本信息\rdoctype声明\nmeta描述性标签\r·网页基本标签\r标题标签\rh1~h6\n段落标签\rp\n换行标签\rbr\n粗体斜体\r粗体b 斜体i\n特殊符号\r（\u0026amp; ;）\n空格 nbsp\n大于gt 小于lt\n版权copy\n·图像标签\r·超链接标签\r页面跳转\r锚链接\r锚标记 a id=“top”\n邮件链接 mailto:\nQQ链接 上“qq推广”官网\n·*概念:行内元素和块元素\r块元素\r独占一行的元素\n行内元素\r撑开宽度的元素\n·列表\r有序列表、无序列表\r自定义列表\r·表格标签\r·媒体元素\r·页面结构\r·iframe内联框架\r链接控制iframe窗口跳转\n·表单\r表单\r元素表单格式\r文本框\rtext\n单选框\rradio\n多选框\rcheckbox\n按钮\rbutton\n下拉框\r文本域、文件域\r滑块、搜索框\r简单验证\r表单应用\r只读 readonly\n禁用 disabled\n隐藏 hidden\n表单初级验证\rplaceholder 提示信息\nrequired 必填\npattern 正则表达式（百度上搜索各种）\n图片来源于b站狂神说的html课程，推荐。\n","date":"2022-12-21T00:00:00Z","image":"https://p.fiveth.cc/img/m/html.jpg","permalink":"https://blog.fiveth.cc/p/c57/","title":"HTML学习笔记"},{"content":"我们知道每种数据类型的储存空间是有限的，如果我们要储存非常大的数可以用long long，更大则unsigned long long，再大就是有些编译器提供的_int128类型，但是要是比这还要大呢?我们就需要用到高精度运算，用数组来模拟非常大的整数。\n我们只要定义一个数组，把数字分别放入数组序列中就可以储存非常大的数。\n接下来我们看看怎么使用高精度运算。\n（注意以下都是我个人的解法，不一定是最优解，借鉴学习即可）\nA+B\r**题目：**高精度加法，相当于 a+b problem，不用考虑负数。（洛谷P1601题）\n输入a和b，然后输出a+b，太简单了！但是，题目要求的是高精度加法，也就是说输入的a和b是非常大的，我们要使用高精度才能储存该数进行处理。\n首先我们看看加法的竖式\n如果超过10就要向下一位进位，进位的数字和下一位的值相加\n#include\u0026lt;iostream\u0026gt; #include\u0026lt;string\u0026gt; #include\u0026lt;algorithm\u0026gt;//包含max函数 using namespace std; int A[500], B[500], C[500];//这个定义必须放在主函数外!!!这样它才会初始化，我被这个坑惨了 int main(){ string a,b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; int lena = a.length(), lenb = b.length(); int len = max(lena, lenb); //把字符变成对应的数字，并倒序存入 for (int i = 0; i \u0026lt; lena; i++) A[i] = a[lena-1-i] - \u0026#39;0\u0026#39;; for (int i = 0; i \u0026lt; lenb; i++) B[i] = b[lenb-1-i] - \u0026#39;0\u0026#39;; //相加并处理进位 for (int i = 0; i \u0026lt; len; i++) { //相加 C[i] += A[i] + B[i]; //进位 C[i + 1] = C[i] / 10; C[i] = C[i] % 10; } //如果进位使得位数增加，我们就多输出一位 if (C[len]) len++; //因为我们之前是倒序存入，所以现在倒序输出就又正了 for (int i = len-1 ; i \u0026gt;= 0; i--) cout \u0026lt;\u0026lt; C[i]; return 0; } A*B\r**题目：**给出两个非负整数，求它们的乘积。每个非负整数不超过 10^2000^（洛谷P1303题）\n还是一样，看似是道弱智题，但是我们要注意输入值的范围，数值非常大，再加上要相乘，很容易就会超过我们数据类型范围，所以又要用到我们的高精度方法。\n算乘法，我们就先复习下乘法竖式\n几个需要知道的点\n和加法非常像，也是超10进位。 这里有个很重要的规律，我们倒着数，第一个数的i位乘第二个数的j位，它们的乘积会到第(i+j-1)位上。 乘积的位数不超过两数的位数之和。 知道了这个，我们就可以开始了。\n#include\u0026lt;iostream\u0026gt; #include\u0026lt;string\u0026gt; using namespace std; int A[5000], B[5000], C[5000]; int main(){ string a, b; cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; int lena = a.length(), lenb = b.length(); //转化成对应数字并倒序存入 for (int i = 1; i \u0026lt;= lena; i++) A[i] = a[lena - i]-\u0026#39;0\u0026#39;; for (int i = 1; i \u0026lt;= lenb; i++) B[i] = b[lenb - i]-\u0026#39;0\u0026#39;; //计算乘积 for (int i = 1; i \u0026lt;= lena; i++) { for (int j = 1; j \u0026lt;= lenb; j++) C[i + j - 1] += A[i] * B[j]; } int len = lena + lenb;//乘积的位数不超过两数的位数之和 //处理进位 for (int i = 1; i \u0026lt;= len; i++) { C[i + 1] += C[i] / 10; C[i] %= 10; } //去掉多余输出的位数 while (!C[len]) len--; //特殊情况，乘积等于0 if (len \u0026lt; 1) len = 1; //输出 for (int i = len ; i \u0026gt;= 1; i--) cout \u0026lt;\u0026lt; C[i]; return 0; } 阶乘之和\r题目描述\n用高精度计算出 $S = 1! + 2! + 3! + \\cdots + n!$（$n \\le 50$）。\n其中 ! 表示阶乘，定义为 $n!=n\\times (n-1)\\times (n-2)\\times \\cdots \\times 1$。例如，$5! = 5 \\times 4 \\times 3 \\times 2 \\times 1=120$。\n输入n，输出s。（洛谷P1009题）\n这道题可以说是前两道题的结合。\n这是我的解法，因为这道题较特殊，所以可以做到比前两道的代码还短，可能有点抽象，要仔细思考\n#include\u0026lt;iostream\u0026gt; using namespace std; int main() { int i, A[1005] = { 0 }, B[1005] = { 0 }, n, j; cin \u0026gt;\u0026gt; n; A[0] = B[0] = 1; //这个循环是外面的加法 for (i = 2; i \u0026lt;= n; i++) { //阶乘的相乘 for (j = 0; j \u0026lt; 100; j++) B[j] *= i; //阶乘的进位 for (j = 0; j \u0026lt; 100; j++) if (B[j] \u0026gt; 9) { B[j + 1] += B[j] / 10; B[j] %= 10; } //每算完一个阶乘就加进结果并处理进位 for (j = 0; j \u0026lt; 100; j++) { A[j] += B[j]; if (A[j] \u0026gt; 9) { A[j + 1] += A[j] / 10; A[j] %= 10; } } } //去除多余的位数 for (i = 100; i \u0026gt;= 0 \u0026amp;\u0026amp; A[i] == 0; i--); //输出 for (j = i; j \u0026gt;= 0; j--) cout\u0026lt;\u0026lt; A[j]; return 0; } 灵活掌握，举一反三才能在程序竞赛中绽放自我。\n","date":"2022-12-20T00:00:00Z","image":"https://p.fiveth.cc/img/m/calculator.webp","permalink":"https://blog.fiveth.cc/p/e08/","title":"算法：高精度运算"},{"content":"辗转相除法是一种求最大公因数的计算方法。\n这种方法在编程中很常用，在数学计算中也可以用来求很复杂的最大公因数问题。\n如何使用\r题目：求最大公因数(36,14)\n我们如何用辗转相除法做这道题呢？\n$$ { 反复用除数除以余数直到除尽 \\\\\\\\ 36{\\div}14=2\\dots8\\\\ 14{\\div}8=1\\dots6\\\\ 8{\\div}6=1\\dots2\\\\ 6{\\div}2=3\\\\ 最后一个除数就是最大公约数，也就是2 } $$我们算出最大公约数(36,14)=2\n到这里，我们就知道如何使用辗转相除法了。\n但是，鲁迅曾说过“我们学公式必须得懂得原理”，我们明白了原理才能灵活运用\n原理\r求最大公因数(a,b)\n首先我们推出这几条式子\n$$ { a{\\div}b=q\\dots r \\\\ a=bq+r \\\\ r=a-bq } $$这是我们辗转法的原理\n$${ (a,b)=(b,r) \\\\a和b的最大公约数就等于b和r的最大公约数 } $$接下来让我们证明这条公式\n$$ { (1)设(a,b)=d \\\\那么a=dm,b=dn \\\\然后我们将其带入r=a-bq \\\\ 得r=d(m-nq)\\\\ 因为m,n,q都是整数，所以r是d的倍数，d是r的因数\\\\ 所以：只要是a,b的因数，就一定是d,r的约数\\\\ } $$$$ { (2)设(b,r)=d\\\\ 和之前一样，那么b=dx,r=dy\\\\ 然后将其代入a=bq+r\\\\ 得a=d(xq+y)\\\\ 因为x,q,y都是整数，所以a是d的倍数，d是a的因数\\\\ 所以：只要是d,r的因数，就一定是a的因数\\\\ } $$这样，我们就得出(a,b)的因数和(b,r)的因数相同，它们的因数都相同，那么它们的最大公因数也就相同。\n所以我们要求(a,b)的最大公因数，我们就通过可以求(b,r)的最大公因数来得到。\n现在我们再来看看开头的题\n题目：求最大公因数(36,14)\n反复用(a,b)=(b,r)的方法\n(36,14)=(14,8)=(8,6)=(6,2)\n最后得到(6,2)，显而易见最大公约数是2\n写gcd函数\r接下来看看我们如何在C++中用辗转相除法写gcd函数\ngcd函数就是用来求最大公因数的函数\nint gcd(int a,int b) { while (a % b != 0) //a能被b整除时就终止循环 { int r = a % b; a = b; b = r; //讲a换成除数b，b换成余数r } 当然也可以直接用algorithm头文件中的gcd函数，\n我们学会自己写是为了理解原理，提升思维，\n自己写还可以在有特殊需求的时候更自定义化。\n","date":"2022-12-14T00:00:00Z","image":"https://p.fiveth.cc/img/m/gcd.webp","permalink":"https://blog.fiveth.cc/p/72c/","title":"辗转相除法-求最大公因数"},{"content":" 2024.4 我出了视频版教程啦：bilibili视频链接\n我的个人博客搭建成功啦！\n这篇文章会给大家分享我是如何从0开始搭建我的个人独立博客的\n接下来我们开始吧\n文章比较精简，没有废话，不要跳步\n准备工具\r首先我们需要到对应网站下载需要的工具\n下载nodejs\n(这篇文章里有修改nodejs缓存路径的教学:文章链接，c盘战士可以不看)\n下载git\n一直点确定就行，全部按它默认勾的\n(这里有一篇详细安装教程文章链接，可以不看)\n接下来我们测试下是否都下载成功\n管理员运行cmd，依次输入\nnode -v npm -v（这个是node附带的） git -v 下载hexo\nnpm install hexo-cli -g 搭建仓库\r成功下载好工具之后，我们开始搭建GitHub存储静态页面的仓库\n首先注册/登入Github\n点击Create a new repository进入新建仓库页面\n仓库名输入：\n用户名.github.io 勾选 Public\n勾选 Add a README file\n拉到下面点击create创建\n生成SSH Keys\r进入任意文件夹，右键空白处然后点Git bash here,输入\nssh-keygen -t rsa -C \u0026#34;邮件地址\u0026#34; 然后敲4次Enter⌨️\n然后进入C:\\Users\\用户名，在里面进入.ssh文件\n用记事本打开里面的id_rsa.pub,全选复制里面的代码\n然后打开github\n进入用户设置，找到SSH keys\n新建SSH keys，名称随意，在下面粘贴代码，\n然后创建\n测试是否成功\n在git bash中输入\nssh -T git@github.com 回车，然后再输入yes\n本地生成博客内容\r在喜欢位置新建文件Blog，然后进入文件夹\n右键空白处然后点Git bash here，输入\nhexo init 如果‘command not find’，就在前面加上npx，如：npx hexo init\n然后\nhexo install 接下来依次输入\nhexo g hexo s （如果不成功的话就重复直到成功，因为国内与github连接不稳定）\n现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了\n然后回到命令行，ctrl+c关闭\n上线博客\r进入之前的Blog文件夹，用记事本打开_config.yml\n拉到最下面将deploy后面的全删掉，复制粘贴这段\ntype: git repository: branch: main 注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！\n去github之前生成的仓库页面，点code，复制https链接\n将其粘贴到我们记事本中的repository：后面\n然后保存退出\n回到博客文件夹，git bash\n安装自动部署发布工具\nnpm install hexo-deployer-git --save 然后在Blog文件夹右键打开git bash，依次输入\nhexo g（生成） hexo d（上传） 如果是第一次使用git的话会需要配置\ngit config --global user.email \u0026#34;你的邮箱\u0026#34; git config --global user.name \u0026#34;你的名字\u0026#34; 配置完后再hexo d上传\n在跳出来的窗口内进行登录\n接下来我们就成功把本地内容上传到github了\n上传成功以后，我们就算搭建好了！上自己的网址看看吧\n网址是我们之前设的仓库名：用户名.github.io\n网站资料\r我们的博客标题还是默认的hexo，整个页面是初始默认的，接下来我们对其进行修改\n用记事本打开我们blog文件夹中的_config.yml文件\n将#Site下面按自己的需求填上\n## Site title: 标题 subtitle: 副标题 description: 描述 keywords: 关键词 author: 站主 language: 语言（可以填写zh-CN） timezone: 时区（可以填写Asia/Shanghai） 然后保存\n如何上传文章\r我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件\nhexo new 文章标题 文章是.md格式，在我们的Blog文件夹中的source/_posts中\n推荐用Typora软件来编辑.md格式的文件\nTypora官网：https://www.typoraio.cn/（89元终身使用，推荐正版）\n破解版奉上：蓝奏云文件\n然后我们用Typora软件打开该.md文件就可以开始写文章了\n写好以后，我们还是一样打开git bash生成、上传\nhexo g hexo d 至此，我们就成功搭建好基本的博客了，剩下的就是对博客的一些优化和美化了。\n我目前使用的hexo博客主题是anzhiyu，推荐主题：Butterfly，anzhiyu\n大家可以参阅主题文档进行安装配置\n有什么问题的话欢迎评论。\n{% tip info %}\n本篇下文：Hexo搭建进阶：Vercel部署、主题安装、基础用法\n我的Hexo优化系列：Hexo文章目录\n{% endtip %}\n","date":"2022-12-10T00:00:00Z","image":"https://p.fiveth.cc/img/m/hexo.jpg","permalink":"https://blog.fiveth.cc/p/bb32/","title":"如何用Hexo搭建个人博客?"}]